
# -- Bad abstraction - Make a move

sequenceDiagram
    Player->>+Game: makeMove
    Game->>+Board: new board(empty)
    loop all pieces in new positions
        Game->>+Board: addPiece
    end


# -- Bad abstraction - Validate moves

sequenceDiagram
    Player->>+Game: validMoves()
    Note over Board: No piece iterator so all positions checked
    loop all positions
        Game->>+Board: getPiece(position)
        Game->>+ChessPiece: pieceMoves(board, position)
        Note over ChessPiece: Doesn't know history or turn
        loop all piece moves
            ChessPiece->>+ChessPiece: isValidMove(board, move)
        end
        Note over Game: Know history and turn
        loop all moves
            Game->>+Game: isValidMove(turn, board, move)
        end
    end

# -- Obvious domain model

classDiagram  

    class ChessGame {
        <<interface>>
        getTeamTurn():TeamColor
        validMoves(ChessPosition):Collection~ChessMove~
        makeMove(ChessMove)

        isInCheck(TeamColor):Boolean
        isInCheckmate(TeamColor):Boolean
        isInStalemate(TeamColor):Boolean

        setBoard(ChessBoard)
        getBoard():ChessBoard
    }


    class ChessBoard {
        <<interface>>
        addPiece(ChessPosition, ChessPiece)
        getPiece(ChessPosition):ChessPiece
        resetBoard()
    }
    ChessGame "1" o-- ChessBoard

    class ChessPiece {
        <<interface>>
        getTeamColor():TeamColor
        getPieceType():PieceType
        pieceMoves(ChessBoard, ChessPosition):Collection~ChessMove~
    }

ChessBoard o-- ChessPiece
ChessPiece <|-- PieceImpl

PieceImpl <|-- King
PieceImpl <|-- Queen
PieceImpl <|-- Rook
PieceImpl <|-- Knight
PieceImpl <|-- Bishop
PieceImpl <|-- Pawn

# -- Dependency Inversion - RuleBook

classDiagram  

    class ChessGame {
        <<interface>>
        getTeamTurn():TeamColor
        makeMove(ChessMove)

        getRuleBook():ChessRuleBook
        setBoard(ChessBoard)
        getBoard():ChessBoard
    }

    class ChessRuleBook {
        <<interface>>
        validMoves(ChessBoard, ChessPosition):Collection~ChessMove~

        isBoardValid(ChessBoard):Boolean

        isInCheck(ChessBoard, TeamColor):Boolean
        isInCheckmate(ChessBoard, TeamColor):Boolean
        isInStalemate(ChessBoard, TeamColor):Boolean
    }

    class ChessRuleBook {
        <<interface>>
    }
    
    ChessGame "1" o-- ChessRuleBook
    ChessGame "1" o-- ChessBoard
    ChessRuleBook o-- MovementRule


MovementRule <|-- KingMovementRule
MovementRule <|-- QueenMovementRule
MovementRule <|-- RookMovementRule
MovementRule <|-- BishopMovementRule
MovementRule <|-- KnightMovementRule

# -- YNGNI

    ## Smell: What are you going to name your implementation?
    class ChessPiece {
        <<interface>>
    }

    ChessPiece <|-- Piece
    ChessPiece <|-- MyPiece
    ChessPiece <|-- PieceImpl
    ChessPiece <|-- TheRealPiece


    ## Don't make it an interface.
    class ChessPiece {
    }

# -- Do not repeat yourself

    class ChessPiece {
        getTeamColor():TeamColor
        getPieceType():PieceType
        pieceMoves(ChessBoard, ChessPosition):Collection~ChessMove~
    }

ChessPiece <|-- King
ChessPiece <|-- Queen
ChessPiece <|-- Rook
ChessPiece <|-- Knight
ChessPiece <|-- Bishop
ChessPiece <|-- Pawn

# -- Single responsibility

    class ChessPiece {
        <<interface>>
        getTeamColor():TeamColor
        getPieceType():PieceType
        pieceMoves(ChessBoard, ChessPosition):Collection~ChessMove~
    }


# -- Open Closed


classDiagram  

    class ChessGame {
    }

    class ChessRuleBook {
        <<interface>>
    }

ChessGame o-- ChessRuleBook
ChessRuleBook <|-- FIDERuleBook
ChessRuleBook <|-- 1300RuleBook
ChessRuleBook <|-- SimplifiedRuleBook
